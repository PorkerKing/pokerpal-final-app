// This is your Prisma schema file for the PokerPal project.
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role { 
  OWNER 
  ADMIN 
  MANAGER 
  MEMBER 
  DEALER 
  CASHIER 
}

enum TournamentStatus { 
  SCHEDULED 
  REGISTERING 
  IN_PROGRESS 
  COMPLETED 
  CANCELLED 
}

enum GameType { 
  NLH 
  PLO 
}

enum TransactionType { 
  DEPOSIT 
  WITHDRAWAL 
  TOURNAMENT_BUYIN 
  TOURNAMENT_CASHOUT 
  CASH_GAME_BUYIN 
  CASH_GAME_CASHOUT 
  STORE_PURCHASE 
  OPERATIONAL_EXPENSE 
}

model Club {
  id                   String                @id @default(cuid())
  name                 String                @unique
  description          String?               @db.Text
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  members              ClubMember[]
  aiPersona            AIPersona?
  membershipTiers      MembershipTier[]
  tournaments          Tournament[]
  cashGameTables       CashGameTable[]
  rakeStructures       RakeStructure[]
  blindStructures      BlindStructure[]
  payoutStructures     PayoutStructure[]
  operationalExpenses  OperationalExpense[]
  leaderboards         Leaderboard[]
  achievements         Achievement[]
  storeItems           StoreItem[]
}

model User {
  id                   String                         @id @default(cuid())
  name                 String?
  email                String?                        @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  createdAt            DateTime                       @default(now())
  updatedAt            DateTime                       @updatedAt
  accounts             Account[]
  sessions             Session[]
  clubs                ClubMember[]
  tournamentEntries    TournamentPlayer[]
  cashGameSessions     CashGameSession[]
  transactions         Transaction[]
  leaderboardEntries   LeaderboardEntry[]
  achievements         UserAchievement[]
  storePurchases       UserStorePurchase[]
  responsibleGaming    ResponsibleGamingSettings?
}

model ClubMember {
  id          String    @id @default(cuid())
  clubId      String
  userId      String
  role        Role      @default(MEMBER)
  joinDate    DateTime  @default(now())
  balance     Decimal   @default(0) @db.Decimal(10, 2)
  club        Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clubId, userId])
}

model AIPersona {
  id          String    @id @default(cuid())
  clubId      String    @unique
  name        String
  personality String    @db.Text
  avatarUrl   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  club        Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MembershipTier {
  id                    String    @id @default(cuid())
  clubId                String
  name                  String
  minPointsRequired     Int       @default(0)
  descriptionOfBenefits String?   @db.Text
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  club                  Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
}

model Tournament {
  id                  String             @id @default(cuid())
  clubId              String
  name                String
  gameType            GameType           @default(NLH)
  buyIn               Decimal            @db.Decimal(10, 2)
  fee                 Decimal            @db.Decimal(10, 2)
  startingStack       Int
  startTime           DateTime
  status              TournamentStatus   @default(SCHEDULED)
  blindStructureId    String
  payoutStructureId   String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  club                Club               @relation(fields: [clubId], references: [id], onDelete: Cascade)
  blindStructure      BlindStructure     @relation(fields: [blindStructureId], references: [id])
  payoutStructure     PayoutStructure    @relation(fields: [payoutStructureId], references: [id])
  players             TournamentPlayer[]
}

model TournamentPlayer {
  id               String      @id @default(cuid())
  tournamentId     String
  userId           String
  registrationTime DateTime    @default(now())
  finalRank        Int?
  winnings         Decimal?    @db.Decimal(10, 2)
  tournament       Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, userId])
}

model BlindStructure {
  id          String       @id @default(cuid())
  clubId      String
  name        String
  levels      Json
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  club        Club         @relation(fields: [clubId], references: [id], onDelete: Cascade)
  tournaments Tournament[]
}

model PayoutStructure {
  id          String       @id @default(cuid())
  clubId      String
  name        String
  payouts     Json
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  club        Club         @relation(fields: [clubId], references: [id], onDelete: Cascade)
  tournaments Tournament[]
}

model CashGameTable {
  id               String            @id @default(cuid())
  clubId           String
  name             String
  gameType         GameType          @default(NLH)
  stakes           String
  minBuyIn         Decimal           @db.Decimal(10, 2)
  maxBuyIn         Decimal           @db.Decimal(10, 2)
  isActive         Boolean           @default(true)
  rakeStructureId  String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  club             Club              @relation(fields: [clubId], references: [id], onDelete: Cascade)
  rakeStructure    RakeStructure     @relation(fields: [rakeStructureId], references: [id])
  sessions         CashGameSession[]
}

model CashGameSession {
  id             String        @id @default(cuid())
  tableId        String
  userId         String
  startTime      DateTime      @default(now())
  endTime        DateTime?
  buyInAmount    Decimal       @db.Decimal(10, 2)
  cashOutAmount  Decimal?      @db.Decimal(10, 2)
  table          CashGameTable @relation(fields: [tableId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RakeStructure {
  id         String          @id @default(cuid())
  clubId     String
  name       String
  percentage Float
  cap        Decimal         @db.Decimal(10, 2)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  club       Club            @relation(fields: [clubId], references: [id], onDelete: Cascade)
  tables     CashGameTable[]
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  type        TransactionType
  amount      Decimal         @db.Decimal(10, 2)
  description String?
  timestamp   DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OperationalExpense {
  id          String   @id @default(cuid())
  clubId      String
  description String
  amount      Decimal  @db.Decimal(10, 2)
  date        DateTime
  createdAt   DateTime @default(now())
  club        Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
}

model Leaderboard {
  id        String             @id @default(cuid())
  clubId    String
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  club      Club               @relation(fields: [clubId], references: [id], onDelete: Cascade)
  entries   LeaderboardEntry[]
}

model LeaderboardEntry {
  id            String      @id @default(cuid())
  leaderboardId String
  userId        String
  points        Int
  updatedAt     DateTime    @updatedAt
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([leaderboardId, userId])
}

model Achievement {
  id               String            @id @default(cuid())
  clubId           String
  name             String
  description      String
  iconUrl          String?
  createdAt        DateTime          @default(now())
  club             Club              @relation(fields: [clubId], references: [id], onDelete: Cascade)
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model StoreItem {
  id          String              @id @default(cuid())
  clubId      String
  name        String
  description String?
  price       Decimal             @db.Decimal(10, 2)
  stock       Int                 @default(0)
  imageUrl    String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  club        Club                @relation(fields: [clubId], references: [id], onDelete: Cascade)
  purchases   UserStorePurchase[]
}

model UserStorePurchase {
  id           String    @id @default(cuid())
  userId       String
  itemId       String
  quantity     Int
  totalPrice   Decimal   @db.Decimal(10, 2)
  purchaseDate DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  item         StoreItem @relation(fields: [itemId], references: [id])
}

model ResponsibleGamingSettings {
  id                   String    @id @default(cuid())
  userId               String    @unique
  depositLimit         Decimal?  @db.Decimal(10, 2)
  lossLimit            Decimal?  @db.Decimal(10, 2)
  sessionTimeLimit     Int?
  selfExclusionUntil   DateTime?
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
} 